{"mappings":"qhBASA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAwBjC,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,IAEpCJ,EAAQ,C,SAAEF,E,MAAUJ,IAEtBO,EAAO,C,SAAEH,E,MAAUJ,GAAQ,GAC1BA,EAAM,G,CA7BbJ,EAAKC,KAAKc,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAYC,OAAOnB,EAAKK,KAAKe,OAC7BC,EAAcF,OAAOnB,EAAKM,OAAOc,OACvC,IAAIE,EAAaH,OAAOnB,EAAKI,MAAMgB,OAEnC,IAAK,IAAIG,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EACrChB,EAAcgB,EAAGD,GACdE,MAAK,EAAChB,SAAEA,EAAQJ,MAAEA,MACjBqB,EAAA3B,GAAS4B,OAAOC,QAAQ,qBAAqBnB,QAAeJ,MAAU,IAEvEwB,OAAM,EAACpB,SAAEA,EAAQJ,MAAEA,MAClBqB,EAAA3B,GAAS4B,OAAOG,QAAQ,oBAAoBrB,QAAeJ,MAAU,IAEzEkB,GAAcJ,C","sources":["src/js/03-promises.js"],"sourcesContent":["\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. \n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. \n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const stepValue = Number(refs.step.value);\n  const amountValue = Number(refs.amount.value);\n  let delayValue = Number(refs.delay.value);\n  \n  for (let i = 1; i <= amountValue; i += 1) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delayValue += stepValue;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\n\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","stepValue","Number","value","amountValue","delayValue","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.b3466769.js.map"}